{"version":3,"sources":["hoc/WithAuthRedirect.tsx","Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/My posts/MyPosts.module.css","Components/Profile/My posts/Post/Post.module.css","Components/Profile/ProfileInfo/Status/StatusWithUseState.tsx","Components/Profile/ProfileInfo/ProfileDataForm.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/My posts/Post/Post.tsx","Components/Profile/My posts/MyPosts.tsx","Components/Profile/My posts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"names":["MapStateToProps","store","isAuth","auth","WithAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","StatusWithUseState","useState","editMode","setEditMode","status","setStatus","useEffect","type","value","onChange","e","currentTarget","onBlur","updateStatusThunk","autoFocus","onDoubleClick","ProfileDataReduxForm","reduxForm","form","onSubmit","handleSubmit","error","createField","Input","required","Textarea","className","s","contacts","Object","keys","profile","map","k","ProfileInfo","isEditMode","setIsEditMode","Preloader","content","src","width","descriptionBlock","photos","large","userPhoto","isOwner","file","target","files","updatePhotoThunk","initialValues","data","promise","updateProfileThunk","Promise","all","then","onEdit","ProfileData","onClick","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","key","contactName","contactDescription","Contact","Post","item","alt","message","likesCount","MyPosts","nextProps","nextState","state","postElements","posts","post","id","postsBlock","ReduxPostField","addPost","mewPostText","maxLength10","maxLengthCreator","Field","messageArea","component","name","placeholder","validate","submitButton","MyPostsContainer","profilePage","dispatch","newPostText","Profile","ProfileContainer","userId","match","params","String","authorizedUserId","history","push","setUserProfileThunk","setStatusThunk","prevProps","prevState","snapshot","openCorrectUserProfile","ProfileBigContainer","compose","app","withRouter"],"mappings":"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","file":"static/js/3.5d906801.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\nconst MapStateToProps = (store: AppStateType) => {\r\n    return {\r\n        isAuth: store.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const WithAuthRedirect = (Component: Function) => {\r\n    class RedirectComponent extends React.Component<any> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    const ConnectedAuthRedirectComponent = connect(MapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__wO8sV\",\"contacts\":\"ProfileInfo_contacts__2di53\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__z_i38\",\"posts\":\"MyPosts_posts__2mXUn\",\"messageArea\":\"MyPosts_messageArea__abWOD\",\"submitButton\":\"MyPosts_submitButton__Uxad4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2tVNb\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {Modal} from \"../../../../Modals/Modal\";\r\n\r\ntype StatusPropsType = {\r\n    status: string\r\n    updateStatusThunk: (status: string) => void\r\n    error: string | null\r\n}\r\n\r\nexport const StatusWithUseState = (props: StatusPropsType) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setStatus(props.status)\r\n        setEditMode(true)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatusThunk(status)\r\n    }\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => setStatus(e.currentTarget.value)\r\n\r\n    return (\r\n        <div>\r\n            {!editMode ?\r\n            <div>\r\n                <b>Status: </b><span onDoubleClick={activateEditMode}>{props.status || \"-----\"}</span>\r\n            </div>\r\n            :\r\n            <div>\r\n                <input\r\n                    type=\"text\"\r\n                    value={status}\r\n                    onChange={onChange}\r\n                    onBlur={activateViewMode}\r\n                    autoFocus\r\n                />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import {ContactsType, ProfileType} from \"../../../redux/ProfileReducer\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport React from \"react\";\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\n\r\ntype PropsType = {\r\n    profile:  ProfileType\r\n}\r\nexport type FormDataType = {\r\n    userId?: number\r\n    fullName?: string\r\n    aboutMe?: string\r\n    lookingForAJob?: boolean\r\n    lookingForAJobDescription?: string\r\n    contacts?: ContactsType\r\n}\r\nexport const ProfileDataForm = (props: InjectedFormProps<FormDataType, PropsType> & PropsType) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div><button>Save</button></div>\r\n        {props.error && props.error}\r\n        <div>\r\n            <b>Name:</b>{createField(\"Enter new name\",\r\n            Input, [required], \"fullName\")}\r\n        </div>\r\n        <div>\r\n            <b>About me:</b> {createField(\"Write about yourself\",\r\n            Textarea, [required], \"aboutMe\")}\r\n        </div>\r\n        <div>\r\n            <b>Working status:</b>{createField(\"\",\r\n            Input, [], \"lookingForAJob\", {type: \"checkbox\"})}\r\n        </div>\r\n        <div>\r\n            <b>My professional skills: </b>{createField(\"Write about your skills\",\r\n            Textarea, [required], \"lookingForAJobDescription\")}\r\n        </div>\r\n        <div>\r\n            <b>Contacts:</b>\r\n            <div className={s.contacts}>{Object.keys(props.profile.contacts).map(k => {\r\n                return <div>\r\n                    <b>{k}: </b>{createField(\"Enter link\", Input, [], `contacts[${k}]`)}\r\n                </div>\r\n            })}</div>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataReduxForm = reduxForm<FormDataType, PropsType>({form: \"profileData\"})(ProfileDataForm)\r\n\r\nexport default ProfileDataReduxForm","import React, {ChangeEvent, useState} from 'react';\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {ContactsType, ProfileType} from \"../../../redux/ProfileReducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {Status} from \"./Status/Status\";\r\nimport userPhoto from '../../../assets/images/user-profile.png'\r\nimport {StatusWithUseState} from \"./Status/StatusWithUseState\";\r\nimport ProfileDataForm, {FormDataType} from './ProfileDataForm';\r\n\r\ntype ProfileInfoPropsType = {\r\n    updatePhotoThunk: (photoFile: File) => void\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatusThunk: (status: string) => void\r\n    updateProfileThunk: (profileData: FormDataType) => void\r\n    isOwner: boolean\r\n    error: string | null\r\n}\r\n\r\nexport function ProfileInfo(props: ProfileInfoPropsType) {\r\n    let [isEditMode, setIsEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onSendPhoto = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const file = e.target && e.target.files && e.target.files[0]\r\n        if (file !== null) {\r\n            props.updatePhotoThunk(file)\r\n        }\r\n    }\r\n\r\n    const onSubmit = (data: FormDataType) => {\r\n        const promise = props.updateProfileThunk(data)\r\n        Promise.all([promise]).then(() => {\r\n            setIsEditMode(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <div>\r\n                <img\r\n                    src=\"https://mirgif.com/priroda/more41.jpg\"\r\n                    width=\"100%\"/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <div>\r\n                    <img src={props.profile.photos.large || userPhoto}/>\r\n                    {props.isOwner && <input type=\"file\" onChange={onSendPhoto}/>}\r\n                </div>\r\n                <StatusWithUseState error={props.error} status={props.status} updateStatusThunk={props.updateStatusThunk}/>\r\n                {isEditMode ?\r\n                    <ProfileDataForm initialValues={props.profile} onSubmit={onSubmit} profile={props.profile}/>\r\n                    :\r\n                    <ProfileData isOwner={props.isOwner} onEdit={() => setIsEditMode(true)} profile={props.profile}/>}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    onEdit: (() => void)\r\n    isOwner: boolean\r\n}\r\nconst ProfileData = (props: ProfileDataPropsType) => {\r\n    return <div>\r\n        <div>\r\n            {props.isOwner && <button onClick={props.onEdit}>Edit</button>}\r\n        </div>\r\n        <div><b>Name:</b> {props.profile.fullName}</div>\r\n        <div><b>About me:</b> {props.profile.aboutMe}</div>\r\n        <div><b>Working status:</b> {props.profile.lookingForAJob ? \"Ready for new offers\" : \"Working\"}</div>\r\n        <div><b>My professional skills: </b>{props.profile.lookingForAJobDescription}</div>\r\n        <div><b>Contacts:</b>\r\n            <div className={s.contacts}>{Object.keys(props.profile.contacts).map(k => {\r\n                return <Contact\r\n                    key={k}\r\n                    contactName={k}\r\n                    contactDescription={props.profile.contacts[k as keyof ContactsType]}\r\n                />\r\n            })}</div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactName: string\r\n    contactDescription: string\r\n}\r\nexport const Contact = (props: ContactPropsType) => {\r\n    return (\r\n        <div>\r\n            <b>{props.contactName}: </b><span>{props.contactDescription}</span>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from \"./Post.module.css\";\r\nimport {PostType} from \"../../../../redux/ProfileReducer\";\r\n\r\n\r\nexport function Post(props: PostType) {\r\n    return (\r\n\r\n            <div className={s.item}>\r\n                <img src=\"https://img1.liveinternet.ru/images/attach/c/6/93/68/93068365_508790c345c65.jpg\"\r\n                     alt={\"avatar\"}\r\n                />\r\n                {props.message}\r\n                <div>\r\n                    <span>Likes: {props.likesCount}</span>\r\n                </div>\r\n            </div>\r\n    );\r\n}","import React from 'react';\r\nimport s from \"./MyPosts.module.css\";\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostType} from \"../../../redux/ProfileReducer\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\ntype MyPostsPropsType ={\r\n    posts: Array<PostType>\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport class MyPosts extends React.Component<MyPostsPropsType> {\r\n\r\n\r\n    shouldComponentUpdate(nextProps: Readonly<MyPostsPropsType>, nextState: Readonly<{}>): boolean {\r\n        return nextProps != this.props || nextState != this.state\r\n    }\r\n\r\n    render() {\r\n\r\n        let onAddPost = (data: NewPostDataType) => {\r\n            this.props.addPost(data.mewPostText);\r\n        };\r\n\r\n        let postElements = this.props.posts\r\n            .map(post => <Post id={post.id} message={post.message} likesCount={post.likesCount}/>)\r\n\r\n        return (\r\n            <div className={s.postsBlock}>\r\n                <h3>MY POSTS</h3>\r\n                <ReduxPostField onSubmit={onAddPost}/>\r\n                <div className={s.posts}>\r\n                    {postElements}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ntype NewPostDataType = {\r\n    mewPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nexport const PostField = (props: InjectedFormProps<NewPostDataType>) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field className={s.messageArea}\r\n                   component={Textarea}\r\n                   name={\"mewPostText\"}\r\n                   placeholder={\"Add new post\"}\r\n                   validate={[required, maxLength10]}\r\n            />\r\n            <div>\r\n                <button className={s.submitButton}>Submit</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const ReduxPostField = reduxForm<NewPostDataType>({form: \"newPost\"})(PostField)","import React from 'react';\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {ActionTypes} from \"../../../redux/redux-store\";\r\nimport { PostType} from \"../../../redux/ProfileReducer\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: (action: ActionTypes) => void): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch({type: \"ADD-POST\", newPostText});\r\n        }\r\n    }\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport const MyPostsContainer =\r\n    connect<MapStateToPropsType,MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./My posts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/ProfileReducer\";\r\nimport {FormDataType} from \"./ProfileInfo/ProfileDataForm\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatusThunk: (status: string) => void\r\n    isOwner: boolean\r\n    updatePhotoThunk: (photoFile: File ) => void\r\n    updateProfileThunk: (profileData: FormDataType) => void\r\n    error: string | null\r\n}\r\n\r\nexport function Profile(props: ProfilePropsType) {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                error={props.error}\r\n                updatePhotoThunk={props.updatePhotoThunk}\r\n                updateProfileThunk={props.updateProfileThunk}\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatusThunk={props.updateStatusThunk}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    ProfileType,\r\n    setStatusThunk,\r\n    setUserProfileThunk, updatePhotoThunk, updateProfileThunk,\r\n    updateStatusThunk\r\n} from \"../../redux/ProfileReducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {RouteComponentProps} from \"react-router\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {FormDataType} from \"./ProfileInfo/ProfileDataForm\";\r\n\r\n\r\ntype ProfileContainerPropsType = MapStateToPropsType & MapDispatchToProps\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    openCorrectUserProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = String(this.props.authorizedUserId)\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.setUserProfileThunk(userId)\r\n        this.props.setStatusThunk(userId)\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.openCorrectUserProfile()\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.openCorrectUserProfile()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile\r\n                error={this.props.error}\r\n                isOwner={!this.props.match.params.userId}\r\n                updateProfileThunk={this.props.updateProfileThunk}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatusThunk={this.props.updateStatusThunk}\r\n                updatePhotoThunk={this.props.updatePhotoThunk}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    error: string | null\r\n}\r\ntype MapDispatchToProps = {\r\n    setUserProfileThunk: (userId: string) => void\r\n    setStatusThunk: (userId: string) => void\r\n    updateStatusThunk: (status: string) => void\r\n    updatePhotoThunk: (photoFile: File) => void\r\n    updateProfileThunk: (profileData: FormDataType) => void\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        error: state.app.error\r\n    }\r\n}\r\nexport const ProfileBigContainer = compose<React.ComponentType>(\r\n    connect<MapStateToPropsType, MapDispatchToProps, {}, AppStateType>\r\n    (mapStateToProps,\r\n        {\r\n            updateProfileThunk,\r\n            setUserProfileThunk,\r\n            setStatusThunk,\r\n            updateStatusThunk,\r\n            updatePhotoThunk\r\n        }),\r\n    withRouter,\r\n    WithAuthRedirect\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}