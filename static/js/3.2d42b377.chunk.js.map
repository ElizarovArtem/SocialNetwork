{"version":3,"sources":["hoc/WithAuthRedirect.tsx","Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/My posts/MyPosts.module.css","Components/Profile/My posts/Post/Post.module.css","Components/Profile/ProfileInfo/Status/StatusWithUseState.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/My posts/Post/Post.tsx","Components/Profile/My posts/MyPosts.tsx","Components/Profile/My posts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"names":["MapStateToProps","store","isAuth","auth","WithAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","StatusWithUseState","useState","editMode","setEditMode","status","setStatus","useEffect","type","value","onChange","e","currentTarget","onBlur","updateStatusThunk","autoFocus","onDoubleClick","ProfileInfo","profile","Preloader","keys","Object","contacts","className","s","content","src","width","descriptionBlock","photos","large","userPhoto","fullName","lookingForAJob","map","k","Post","item","alt","message","likesCount","MyPosts","nextProps","nextState","state","postElements","posts","post","id","postsBlock","ReduxPostField","onSubmit","data","addPost","mewPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","messageArea","component","Textarea","name","placeholder","validate","required","submitButton","MyPostsContainer","profilePage","dispatch","newPostText","Profile","ProfileContainer","userId","match","params","String","authorizedUserId","history","push","setUserProfileThunk","setStatusThunk","ProfileBigContainer","compose","withRouter"],"mappings":"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","file":"static/js/3.2d42b377.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\nconst MapStateToProps = (store: AppStateType) => {\r\n    return {\r\n        isAuth: store.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const WithAuthRedirect = (Component: Function) => {\r\n    class RedirectComponent extends React.Component<any> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    const ConnectedAuthRedirectComponent = connect(MapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__wO8sV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__z_i38\",\"posts\":\"MyPosts_posts__2mXUn\",\"messageArea\":\"MyPosts_messageArea__abWOD\",\"submitButton\":\"MyPosts_submitButton__Uxad4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2tVNb\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype StatusPropsType = {\r\n    status: string\r\n    updateStatusThunk: (status: string) => void\r\n}\r\n\r\nexport const StatusWithUseState = (props: StatusPropsType) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const activateEditMode = () => setEditMode(true)\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatusThunk(status)\r\n    }\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => setStatus(e.currentTarget.value)\r\n\r\n    return (\r\n        <div>\r\n            {!editMode ?\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{status || \"-----\"}</span>\r\n            </div>\r\n            :\r\n            <div>\r\n                <input\r\n                    type=\"text\"\r\n                    value={status}\r\n                    onChange={onChange}\r\n                    onBlur={activateViewMode}\r\n                    autoFocus\r\n                />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {ProfileType} from \"../../../redux/ProfileReducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {Status} from \"./Status/Status\";\r\nimport userPhoto from '../../../assets/images/user-profile.png'\r\nimport {StatusWithUseState} from \"./Status/StatusWithUseState\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatusThunk: (status: string) => void\r\n}\r\nexport function ProfileInfo(props: ProfileInfoPropsType) {\r\n    if(!props.profile){\r\n        return <Preloader/>\r\n    }\r\n\r\n    let keys = Object.keys(props.profile.contacts)\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <div>\r\n                <img\r\n                    src=\"https://mirgif.com/priroda/more41.jpg\"\r\n                    width=\"100%\"/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <div>\r\n                    <img src={props.profile.photos.large ? props.profile.photos.large : userPhoto }/>\r\n                </div>\r\n                <div>Name: {props.profile.fullName}</div>\r\n                <StatusWithUseState status={props.status} updateStatusThunk={props.updateStatusThunk}/>\r\n                <div>Working status: {props.profile.lookingForAJob ? \"Ready for new offers\" : \"Working\"}</div>\r\n                <div>Contacts: {keys.map(k => {\r\n                    return <li>{k}</li>\r\n                })}</div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport s from \"./Post.module.css\";\r\nimport {PostType} from \"../../../../redux/ProfileReducer\";\r\n\r\n\r\nexport function Post(props: PostType) {\r\n    return (\r\n\r\n            <div className={s.item}>\r\n                <img src=\"https://img1.liveinternet.ru/images/attach/c/6/93/68/93068365_508790c345c65.jpg\"\r\n                     alt={\"avatar\"}\r\n                />\r\n                {props.message}\r\n                <div>\r\n                    <span>Likes: {props.likesCount}</span>\r\n                </div>\r\n            </div>\r\n    );\r\n}","import React from 'react';\r\nimport s from \"./MyPosts.module.css\";\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostType} from \"../../../redux/ProfileReducer\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\ntype MyPostsPropsType ={\r\n    posts: Array<PostType>\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport class MyPosts extends React.Component<MyPostsPropsType> {\r\n\r\n\r\n    shouldComponentUpdate(nextProps: Readonly<MyPostsPropsType>, nextState: Readonly<{}>): boolean {\r\n        return nextProps != this.props || nextState != this.state\r\n    }\r\n\r\n    render() {\r\n\r\n        let onAddPost = (data: NewPostDataType) => {\r\n            this.props.addPost(data.mewPostText);\r\n        };\r\n\r\n        let postElements = this.props.posts\r\n            .map(post => <Post id={post.id} message={post.message} likesCount={post.likesCount}/>)\r\n\r\n        return (\r\n            <div className={s.postsBlock}>\r\n                <h3>MY POSTS</h3>\r\n                <ReduxPostField onSubmit={onAddPost}/>\r\n                <div className={s.posts}>\r\n                    {postElements}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ntype NewPostDataType = {\r\n    mewPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nexport const PostField = (props: InjectedFormProps<NewPostDataType>) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field className={s.messageArea}\r\n                   component={Textarea}\r\n                   name={\"mewPostText\"}\r\n                   placeholder={\"Add new post\"}\r\n                   validate={[required, maxLength10]}\r\n            />\r\n            <div>\r\n                <button className={s.submitButton}>Submit</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const ReduxPostField = reduxForm<NewPostDataType>({form: \"newPost\"})(PostField)","import React from 'react';\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {ActionTypes} from \"../../../redux/redux-store\";\r\nimport { PostType} from \"../../../redux/ProfileReducer\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: (action: ActionTypes) => void): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch({type: \"ADD-POST\", newPostText});\r\n        }\r\n    }\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport const MyPostsContainer =\r\n    connect<MapStateToPropsType,MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./My posts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/ProfileReducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatusThunk: (status: string) => void\r\n}\r\n\r\nexport function Profile(props: ProfilePropsType) {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatusThunk={props.updateStatusThunk}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    ProfileType,\r\n    setStatusThunk,\r\n    setUserProfileThunk,\r\n    updateStatusThunk\r\n} from \"../../redux/ProfileReducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {RouteComponentProps} from \"react-router\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype ProfileContainerPropsType = MapStateToPropsType & MapDispatchToProps\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = String(this.props.authorizedUserId)\r\n            if(!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.setUserProfileThunk(userId)\r\n        this.props.setStatusThunk(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatusThunk={this.props.updateStatusThunk}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n}\r\ntype MapDispatchToProps = {\r\n    setUserProfileThunk: (userId: string) => void\r\n    setStatusThunk: (userId: string) => void\r\n    updateStatusThunk: (status: string) => void\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id\r\n    }\r\n}\r\nexport const ProfileBigContainer = compose<React.ComponentType>(\r\n    connect<MapStateToPropsType, MapDispatchToProps, {}, AppStateType>\r\n    (mapStateToProps, {setUserProfileThunk, setStatusThunk, updateStatusThunk}),\r\n    withRouter,\r\n    WithAuthRedirect\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}